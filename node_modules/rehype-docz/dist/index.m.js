import{parse}from"babylon";import traverse from"babel-traverse";import{format}from"prettier";import logger from"signale";import is from"unist-util-is";import nodeToString from"hast-util-to-string";import strip from"strip-indent";const codeFromNode=e=>o=>{let r="";const t=parse(o,{plugins:["jsx"]});return traverse(t,{enter(t){if(e(t))return r=o.slice(t.node.start,t.node.end),void t.stop()}}),r},format$1=e=>new Promise((o,r)=>{try{o(format(e,{parser:"babylon",semi:!1,singleQuote:!0,trailingComma:"all"}))}catch(e){logger.fatal(e),o(e)}}),componentName=e=>{const o=e.match(/^\<\\?(\w+)/);return o&&o[1]},isPlayground=e=>"Playground"===e,isOpenTag=e=>e.isJSXOpeningElement()&&isPlayground(e.node.name.name),isClosetag=e=>e.isJSXClosingElement()&&isPlayground(e.node.name.name),removePlayground=e=>{const o=codeFromNode(isOpenTag),r=codeFromNode(isClosetag);return e.replace(o(e),"").replace(r(e),"")},addCodeProp=async(e,o)=>{const r=componentName(e.value),t=RegExp(`^\\<${r}`);if(isPlayground(r)){const n=(await format$1(nodeToString(e))).slice(1,1/0),a=strip(removePlayground(n)).trim();e.value=e.value.replace(t,`<${r} __position={${o}} __code={\`${a}\`}`)}};var index=()=>e=>{const o=[e.children.filter(e=>is("jsx",e)).map(addCodeProp)];return Promise.all(o).then(()=>e)};export default index;
